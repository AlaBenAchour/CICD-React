
# name: React.js Test and Docker Build/Push

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   # Step 1: Testing
#   test:
#     runs-on: ubuntu-20.04

#     steps:
#       # Checkout the repository
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Set up Node.js
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '16' # Specify your desired Node.js version

#       # Install dependencies
#       - name: Install Dependencies
#         run: |
#           npm install
#           npm install --save @testing-library/react @testing-library/jest-dom # Install RTL dependencies

#       # Run Jest tests
#       - name: Run Jest Tests
#         run: |
#           npm test -- --ci --coverage

#       # Run RTL tests
#       - name: Run React Testing Library Tests
#         run: |
#           npm run test -- --ci --coverage --testPathPattern=src/**/*.test.js

#   # Step 2: Build and Push Docker Image
#   build-and-push:
#     runs-on: ubuntu-20.04
#     needs: test # This ensures the test step runs first and must pass.

#     steps:
#       # Checkout the repository
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Log in to Docker Hub
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       # Build the Docker image
#       - name: Build Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest .

#       # Push the Docker image to Docker Hub
#       - name: Push Docker Image
#         run: |
#           docker push ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest
name: React.js Test and Docker Build/Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Step 1: Testing
  test:
    runs-on: ubuntu-20.04

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Specify your desired Node.js version

      # Install dependencies
      - name: Install Dependencies
        run: |
          npm install
          npm install --save @testing-library/react @testing-library/jest-dom # Install RTL dependencies

      # Run Jest tests
      - name: Run Jest Tests
        run: |
          npm test -- --ci --coverage

      # Run RTL tests
      - name: Run React Testing Library Tests
        run: |
          npm run test -- --ci --coverage --testPathPattern=src/**/*.test.js

  # Step 2: Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-20.04
    needs: test # This ensures the test step runs first and must pass.

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest .

      # Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest

  # Step 3: Deploy to Azure App Service
  deploy-to-azure:
    runs-on: ubuntu-20.04
    needs: build-and-push # Ensure the build and push steps are successful before deploying

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to Azure using Service Principal credentials
      - name: Log in to Azure
        run: |
          az login
        # uses: azure/login@v1
        # with:
        #   client-id: ${{ secrets.AZURE_CLIENT_ID }}
        #   client-secret: ${{ secrets.AZURE_SECRET }}
        #   tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      # Set up Azure App Service
      - name: Set up Azure App Service
        run: |
          az webapp config container set --name ${{ secrets.AZURE_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ secrets.DOCKER_USERNAME }}/my-react-app:latest

      # Restart the Azure App Service to apply the changes
      - name: Restart Azure App Service
        run: |
          az webapp restart --name ${{ secrets.AZURE_APP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}
